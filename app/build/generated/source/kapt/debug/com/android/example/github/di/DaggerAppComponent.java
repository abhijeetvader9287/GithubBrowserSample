// Generated by Dagger (https://google.github.io/dagger).
package com.android.example.github.di;

import android.app.Activity;
import android.app.Application;
import android.arch.lifecycle.ViewModel;
import android.support.v4.app.Fragment;
import com.android.example.github.AppExecutors;
import com.android.example.github.AppExecutors_Factory;
import com.android.example.github.GithubApp;
import com.android.example.github.GithubApp_MembersInjector;
import com.android.example.github.MainActivity;
import com.android.example.github.MainActivity_MembersInjector;
import com.android.example.github.api.GithubService;
import com.android.example.github.db.GithubDb;
import com.android.example.github.db.RepoDao;
import com.android.example.github.db.UserDao;
import com.android.example.github.repository.RepoRepository;
import com.android.example.github.repository.RepoRepository_Factory;
import com.android.example.github.repository.UserRepository;
import com.android.example.github.repository.UserRepository_Factory;
import com.android.example.github.ui.repo.RepoFragment;
import com.android.example.github.ui.repo.RepoFragment_MembersInjector;
import com.android.example.github.ui.repo.RepoViewModel;
import com.android.example.github.ui.repo.RepoViewModel_Factory;
import com.android.example.github.ui.search.SearchFragment;
import com.android.example.github.ui.search.SearchFragment_MembersInjector;
import com.android.example.github.ui.search.SearchViewModel;
import com.android.example.github.ui.search.SearchViewModel_Factory;
import com.android.example.github.ui.user.UserFragment;
import com.android.example.github.ui.user.UserFragment_MembersInjector;
import com.android.example.github.ui.user.UserViewModel;
import com.android.example.github.ui.user.UserViewModel_Factory;
import com.android.example.github.viewmodel.GithubViewModelFactory;
import com.android.example.github.viewmodel.GithubViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;

public final class DaggerAppComponent implements AppComponent {
  private Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<AppExecutors> appExecutorsProvider;

  private Provider<Application> applicationProvider;

  private Provider<GithubDb> provideDbProvider;

  private Provider<UserDao> provideUserDaoProvider;

  private Provider<GithubService> provideGithubServiceProvider;

  private Provider<UserRepository> userRepositoryProvider;

  private Provider<RepoDao> provideRepoDaoProvider;

  private Provider<RepoRepository> repoRepositoryProvider;

  private UserViewModel_Factory userViewModelProvider;

  private SearchViewModel_Factory searchViewModelProvider;

  private RepoViewModel_Factory repoViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<GithubViewModelFactory> githubViewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.appExecutorsProvider = DoubleCheck.provider(AppExecutors_Factory.create());
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideDbProvider =
        DoubleCheck.provider(
            AppModule_ProvideDbFactory.create(builder.appModule, applicationProvider));
    this.provideUserDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideUserDaoFactory.create(builder.appModule, provideDbProvider));
    this.provideGithubServiceProvider =
        DoubleCheck.provider(AppModule_ProvideGithubServiceFactory.create(builder.appModule));
    this.userRepositoryProvider =
        DoubleCheck.provider(
            UserRepository_Factory.create(
                appExecutorsProvider, provideUserDaoProvider, provideGithubServiceProvider));
    this.provideRepoDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideRepoDaoFactory.create(builder.appModule, provideDbProvider));
    this.repoRepositoryProvider =
        DoubleCheck.provider(
            RepoRepository_Factory.create(
                appExecutorsProvider,
                provideDbProvider,
                provideRepoDaoProvider,
                provideGithubServiceProvider));
    this.userViewModelProvider =
        UserViewModel_Factory.create(userRepositoryProvider, repoRepositoryProvider);
    this.searchViewModelProvider = SearchViewModel_Factory.create(repoRepositoryProvider);
    this.repoViewModelProvider = RepoViewModel_Factory.create(repoRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3)
            .put(UserViewModel.class, (Provider) userViewModelProvider)
            .put(SearchViewModel.class, (Provider) searchViewModelProvider)
            .put(RepoViewModel.class, (Provider) repoViewModelProvider)
            .build();
    this.githubViewModelFactoryProvider =
        DoubleCheck.provider(
            GithubViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(GithubApp githubApp) {
    injectGithubApp(githubApp);
  }

  private GithubApp injectGithubApp(GithubApp instance) {
    GithubApp_MembersInjector.injectDispatchingAndroidInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends MainActivityModule_ContributeMainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public MainActivityModule_ContributeMainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements MainActivityModule_ContributeMainActivity.MainActivitySubcomponent {
    private Provider<FragmentBuildersModule_ContributeRepoFragment.RepoFragmentSubcomponent.Builder>
        repoFragmentSubcomponentBuilderProvider;

    private Provider<FragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Builder>
        userFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent.Builder>
        searchFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(3)
          .put(RepoFragment.class, (Provider) repoFragmentSubcomponentBuilderProvider)
          .put(UserFragment.class, (Provider) userFragmentSubcomponentBuilderProvider)
          .put(SearchFragment.class, (Provider) searchFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.repoFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeRepoFragment.RepoFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBuildersModule_ContributeRepoFragment.RepoFragmentSubcomponent.Builder
                get() {
              return new RepoFragmentSubcomponentBuilder();
            }
          };
      this.userFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Builder
                get() {
              return new UserFragmentSubcomponentBuilder();
            }
          };
      this.searchFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent
                    .Builder
                get() {
              return new SearchFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      MainActivity_MembersInjector.injectDispatchingAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class RepoFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeRepoFragment.RepoFragmentSubcomponent.Builder {
      private RepoFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeRepoFragment.RepoFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(RepoFragment.class.getCanonicalName() + " must be set");
        }
        return new RepoFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(RepoFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class RepoFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeRepoFragment.RepoFragmentSubcomponent {
      private RepoFragmentSubcomponentImpl(RepoFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(RepoFragment arg0) {
        injectRepoFragment(arg0);
      }

      private RepoFragment injectRepoFragment(RepoFragment instance) {
        RepoFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.githubViewModelFactoryProvider.get());
        RepoFragment_MembersInjector.injectAppExecutors(
            instance, DaggerAppComponent.this.appExecutorsProvider.get());
        return instance;
      }
    }

    private final class UserFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent.Builder {
      private UserFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(UserFragment.class.getCanonicalName() + " must be set");
        }
        return new UserFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(UserFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class UserFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeUserFragment.UserFragmentSubcomponent {
      private UserFragmentSubcomponentImpl(UserFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(UserFragment arg0) {
        injectUserFragment(arg0);
      }

      private UserFragment injectUserFragment(UserFragment instance) {
        UserFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.githubViewModelFactoryProvider.get());
        UserFragment_MembersInjector.injectAppExecutors(
            instance, DaggerAppComponent.this.appExecutorsProvider.get());
        return instance;
      }
    }

    private final class SearchFragmentSubcomponentBuilder
        extends FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent.Builder {
      private SearchFragment seedInstance;

      @Override
      public FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(SearchFragment.class.getCanonicalName() + " must be set");
        }
        return new SearchFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(SearchFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class SearchFragmentSubcomponentImpl
        implements FragmentBuildersModule_ContributeSearchFragment.SearchFragmentSubcomponent {
      private SearchFragmentSubcomponentImpl(SearchFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(SearchFragment arg0) {
        injectSearchFragment(arg0);
      }

      private SearchFragment injectSearchFragment(SearchFragment instance) {
        SearchFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.githubViewModelFactoryProvider.get());
        SearchFragment_MembersInjector.injectAppExecutors(
            instance, DaggerAppComponent.this.appExecutorsProvider.get());
        return instance;
      }
    }
  }
}
